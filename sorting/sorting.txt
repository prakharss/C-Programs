BACKLOG

IMPORTANT THINGS TO REMEMBER
1)Stable sort - A sorting algorithm is said to be stable if two objects with equal keys appear in the same order in sorted output as they appear in the input unsorted array. 
non-stable sorting algorithm - heap Sort, quick Sort
stable sorting algorithm - bubble sort, merge sort, insertion sort, radix sort, bucket sort, counting sort, general sort

2)Quick sort - It's worst case complexity is O(n2). If we choose median position as pivot, then complexity will be O(nlogn).

Analysis of QuickSort
Time taken by QuickSort in general can be written as following 
 T(n) = T(k) + T(n-k-1) + O(n)
The first two terms are for two recursive calls, the last term is for the partition process. k is the number of elements which are smaller than pivot.
The time taken by QuickSort depends upon the input array and partition strategy. Following are three cases.

Worst Case: The worst case occurs when the partition process always picks greatest or smallest element as pivot. 
If we consider above partition strategy where last element is always picked as pivot, the worst case would occur when the array is already sorted in increasing or decreasing order. 
Following is recurrence for worst case.
 T(n) = T(0) + T(n-1) + O(n)
which is equivalent to  
 T(n) = T(n-1) + O(n)
The solution of above recurrence is O(n^2).

Best Case: The best case occurs when the partition process always picks the middle element as pivot. Following is recurrence for best case.
 T(n) = 2T(n/2) + O(n)
The solution of above recurrence is O(n*log(n)).

3)Radix sort
QuickSort, MergeSort, HeapSort are comparison based sorting algorithms.
CountSort is not comparison based algorithm. It has the complexity of O(n+k), where k is the maximum element of the input array.
So, if k is n, CountSort becomes linear sorting, which is better than comparison based sorting algorithms that have O(nlogn) time complexity.
The idea is to extend the CountSort algorithm to get a better time complexity when k goes O(n2). Here comes the idea of Radix Sort.

4)WHY QUICK SORT IS FASTER THAN HEAP SORT?	
Quick sort has better locality of reference.By contrast, heapsort jumps around significantly more.
Given an array with a normal distribution, Quicksort and Heapsort will both run in O(n log(n)). But Quicksort will execute faster because its constant factors are smaller than 
the constant factors for Heapsort. 

5)Why does heap sort have a space complexity of O(1) and quick sort have time complexity of O(log n)?
https://stackoverflow.com/questions/22233532/why-does-heap-sort-have-a-space-complexity-of-o1